#include <math.h>
#include <stdio.h>
#include <stdlib.h>
#define m 3
#define n 5

void scanData(double **C, double *A, double *B){
	FILE *fc = fopen("C.txt", "r");
	FILE *fa = fopen("A.txt", "r");
	FILE *fb = fopen("B.txt", "r");
	for(int i = 0; i < m; i++){
		for(int j = 0; j < n; j++){
			fscanf(fc, "%lf\t", &C[i][j]);
		}
		fscanf(fc, "\n");
		fscanf(fa, "%lf\t", &A[i]);
	}
	for(int i = 0; i < n; i++)
		fscanf(fb, "%lf\t", &B[i]);
	fclose(fc);
	fclose(fa);
	fclose(fb);
}

void checkOpen(double *A, double *B){
	double sumA = 0, sumB = 0;
	for(int i = 0; i < m; i++)
		sumA += A[i];
	for(int i = 0; i < n; i++)
		sumB += B[i];
	if(sumA == sumB) printf("Closed!");
	else printf("Open!");
}

void methodNorthWest(double ** X, double *A, double *B){
	for(int i = 0; i < m; i++)
		for(int j = 0; j < n; j++)
			X[i][j] = -1;
	int i=0;
	int j=0;
	while(i !=m && j != n){
		if(A[i] < B[j]){
			X[i][j] = A[i];
			B[j] -= X[i][j];
			i++;
		}else if(A[i] > B[j]){
			X[i][j] = B[j];
			A[i] -= X[i][j];
			j++;
		}else if(A[i] == B[j]){
			X[i][j] = A[i];
			A[i] = 0;
			j++;
		}
	}
}

void printTable(double **C, double *A, double *B){
	for(int i = 0; i < m; i++){
		for(int j = 0; j < n; j++){
			printf("%.2lf\t", C[i][j]);
		}
		printf("\n");
	}
	printf("A : ");
	for(int i = 0; i < m; i++)
		printf("%.2lf\t", A[i]);
	printf("\nB : ");
	for(int i = 0; i < n; i++)
		printf("%.2lf\t", B[i]);
	printf("\n");
}
void printX(double **X){
	printf("\n");
	for(int i = 0; i < m; i++){
		for(int j = 0; j < n; j++)
			printf("%.2lf\t", X[i][j]);
		printf("\n");
	}
}

int checkX(double **X);
void findUV(double **C, double **X, double *U, double *V);
void findDelta(double **delta, double **C, double *U, double *V);
int isOptimalDelta(double **delta, double **X);
void doNewX(double **X, double **Z, double **delta);

int main(int argc, char **argv)
{
	double **C;
	C = (double**)malloc(m * sizeof(double*));
	for(int i = 0; i < m; i++)
		C[i] = (double*)malloc(n * sizeof(double));
	double **X;
	X = (double**)malloc(m * sizeof(double*));
	for(int i = 0; i < m; i++)
		X[i] = (double*)malloc(n * sizeof(double));
	double **Z;
	Z = (double**)malloc(m * sizeof(double*));
	for(int i = 0; i < m; i++)
		Z[i] = (double*)malloc(n * sizeof(double));
	for(int i = 0; i < m; i++)
		for(int j = 0; j < n; j++)
			Z[i][j] = -1;
	double **delta;
	delta = (double**)malloc(m * sizeof(double*));
	for(int i = 0; i < m; i++)
		delta[i] = (double*)malloc(n * sizeof(double));
	double* A = malloc(m * sizeof(double));
	double* B = malloc(n * sizeof(double));
	scanData(C, A, B);
	printTable(C, A, B);
	checkOpen(A, B);
	methodNorthWest(X, A, B);
	printX(X);
	if(checkX(X) == 0)
		printf("Vurodjena!\n");
	printf("\n");
	double* U = malloc(m * sizeof(double));
	double* V = malloc(n * sizeof(double));
	findUV(C, X, U, V);
	printf("Delta:\n");
	findDelta(delta, C, U, V);
	int isOpt = isOptimalDelta(delta, X);
	printf("is opt = %d\n", isOpt);
	while(1){
		doNewX(X, Z, delta);
		findUV(C, X, U, V);
		printf("Delta:\n");
		findDelta(delta, C, U, V);
		isOpt = isOptimalDelta(delta, X);
		printf("is opt = %d\n", isOpt);
		if(isOpt) break;
	}
	return 0;
}

void doNewDelta(double **delta, double **X){
	
}

void doNewX(double **X, double **Z, double **delta){
	int k = 0;
	int l = 0;
	double max = -999999;
	for(int i = 0; i < m; i++){
		for(int j = 0; j < n; j++){
			if(delta[i][j] >= max){
				max = delta[i][j];
				k = i;
				l = j;
			}
		}
	}
	printf("%d %d %.1lf\n", k, l, max);
	for(int i = 0; i < m; i++)
		for(int j = 0; j < n; j++)
			Z[i][j] = delta[i][j];
	int NullCount = 0;
	//----------------------------------------------------
		for(int i = 0; i < m; i++){
			if(i != k){
				NullCount = 0;
					for(int j = 0; j < n; j++){
						if(Z[i][j] == 0)
							NullCount++;
					}
					if(NullCount <= 1){
						for(int j = 0; j < n; j++)
							Z[i][j] = -88.88;
					}
			}
		}
		for(int j = 0; j < n; j++){
			if(j != l){
				NullCount = 0;
					for(int i = 0; i < m; i++){
						if(Z[i][j] == 0)
							NullCount++;
					}
					if(NullCount <= 1){
						for(int i = 0; i < m; i++)
							Z[i][j] = -88.88;
					}
			}
		}
		for(int i = 0; i < m; i++){
			if(i != k){
				NullCount = 0;
					for(int j = 0; j < n; j++){
						if(Z[i][j] == 0)
							NullCount++;
					}
					if(NullCount <= 1){
						for(int j = 0; j < n; j++)
							Z[i][j] = -88.88;
					}
			}
		}
		for(int j = 0; j < n; j++){
			if(j != l){
				NullCount = 0;
					for(int i = 0; i < m; i++){
						if(Z[i][j] == 0)
							NullCount++;
					}
					if(NullCount <= 1){
						for(int i = 0; i < m; i++)
							Z[i][j] = -88.88;
					}
			}
		}
	//----------------------------------------------------
	printX(Z);
	double znak[m][n];
	for(int i = 0; i < m; i++)
		for(int j = 0; j < n; j++)
			znak[i][j] = 0;
	znak[k][l] = 1;
	for(int k = 0; k < 2; k++){
		for(int j = 0; j < n; j++){
			int has = 0;
			for(int i = 0; i < m; i++)
				if(znak[i][j] != 0)
					has = znak[i][j];
			if(has == 1){
				for(int i = 0; i < m; i++){
					if(Z[i][j] != -88.88)
						if(X[i][j] >= 0)
							if(znak[i][j] == 0)
								znak[i][j] = -1;
				}
			}else if(has == -1){
				for(int i = 0; i < m; i++){
					if(Z[i][j] != -88.88)
						if(X[i][j] >= 0)
							if(znak[i][j] == 0)
								znak[i][j] = 1;
				}
			}
		}
		for(int i = 0; i < m; i++){
			int has = 0;
			for(int j = 0; j < n; j++)
				if(znak[i][j] != 0)
					has = znak[i][j];
			if(has == 1){
				for(int j = 0; j < n; j++){
					if(Z[i][j] != -88.88)
						if(X[i][j] >= 0)
							if(znak[i][j] == 0)
								znak[i][j] = -1;
				}
			}else if(has == -1){
				for(int j = 0; j < n; j++){
					if(Z[i][j] != -88.88)
						if(X[i][j] >= 0)
							if(znak[i][j] == 0)
								znak[i][j] = 1;
				}
			}
		}
	}
	for(int i = 0; i < m; i++){
		for(int j = 0; j < n; j++)
			printf("%.1lf\t", znak[i][j]);
		printf("\n");
	}
	
	double tau = 9999;
	for(int i = 0; i < m; i++)
		for(int j = 0; j < n; j++)
			if(znak[i][j] < 0)
				if(X[i][j] < tau)
					tau = X[i][j];
	printf("Tau = %.1lf\n", tau);
	for(int i = 0; i < m; i++)
		for(int j = 0; j < n; j++)
			if(znak[i][j] < 0){
				X[i][j] -= tau; 
			}else if(znak[i][j] > 0){
				if(X[i][j] == -1)
					X[i][j] += 1;
				X[i][j] += tau;
			}
	for(int i = 0; i < m; i++)
		for(int j = 0; j < n; j++)
			if(X[i][j] == 0)
				X[i][j] = -1;
	printX(X);
}

int isOptimalDelta(double **delta, double **X){
	int isOpt = 1;
	for(int i = 0; i < m; i++)
		for(int j = 0; j < n; j++)
			if(X[i][j] == -1)
				if(delta[i][j] >= 0)
					isOpt = 0;
	return isOpt;
}

void findDelta(double **delta, double **C, double *U, double *V){
	for(int i = 0; i < m; i++){
		for(int j = 0; j < n; j++){
			delta[i][j] = U[i] + V[j] -C[i][j];
			printf("%.1lf\t", delta[i][j]);
		}
		printf("\n");
	}
}

void findUV(double **C, double **X, double *U, double *V){
	for(int i = 0; i < m; i++)
		U[i] = -1;
	for(int i = 0; i < n; i++)
		V[i] = -1;
	V[0] = C[0][0];
	U[0] = 0;
	for(int j = 0; j < n; j++){
		if(X[0][j] >= 0){
			V[j] = C[0][j] - U[0];
		}
	}
	for(int i = 1; i < m; i++){
	for(int j = 0; j < n; j++){
		if(X[i][j] >= 0){
			if(V[j] != -1)
				U[i] = C[i][j] - V[j];
		}
	}
	for(int j = 0; j < n; j++){
		if(X[i][j] >= 0){
			V[j] = C[i][j] - U[i];
		}
	}
	}	
	printf("\nU:");
	for(int i = 0; i < m; i++)
		printf("%.1lf\t", U[i]);
	printf("\nV:");
	for(int i = 0; i < n; i++)
		printf("%.1lf\t", V[i]);
		printf("\n");
}

int checkX(double **X){
	int c = 0;
	for(int i = 0; i < m; i++){
		for(int j = 0; j < n; j++){
			if(X[i][j] != -1)
				c++;
		}
	}
	if(c != (m + n) - 1)
		return 0;
	else
		return 1;
}

